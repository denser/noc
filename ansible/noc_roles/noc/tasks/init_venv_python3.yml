---
- name: gather py3 facts
  vars:
    ansible_python_interpreter: /usr/bin/python3
  setup:
    gather_subset:
      - 'min'

- name: Check if we have python in NOC/bin/ folder
  stat:
    path: "{{ noc_root }}/bin/python"
  register: noc_bin_python_path

- name: Check noc Python version
  shell: "{{ noc_root|quote }}/bin/python -V | cut -d' ' -f 2"
  register: noc_python_existing_version
  when:
    - noc_bin_python_path.stat.exists

- name: Strip existing noc python version
  set_fact:
    noc_python_existing_family_version: "{{ noc_python_existing_version.stdout.split('.')[:2] | join('.') }}"
  when:
    - noc_python_existing_version is defined and noc_python_existing_version and noc_bin_python_path.stat.exists

- name: Check if we have system Python of {{ noc_py3_ver }} version
  register: system_python3_path
  stat:
    path: "/usr/bin/python{{ noc_py3_ver }}"

- name: Check system Python version
  shell: /usr/bin/python{{ noc_py3_ver|quote }} -V | cut -d' ' -f 2
  register: system_python3_version
  when: system_python3_path.stat.exists

# Archive whole directory with old python2.* version and then delete folder's content
- block:
    - name: archive current noc dir
      archive:
        path: "{{noc_root}}"
        dest: "{{noc_root}}/../noc_on_old_python.tbz"
        format: bz2
      ignore_errors: true

    - name: check if we have custom settings.yml
      stat:
        path: "{{ noc_root }}/etc/settings.yml"
      register: stat_result

    - name: Copy settings.yml to /tmp
      copy:
        src: "{{ noc_root }}/etc/settings.yml"
        dest: /tmp
        remote_src: true
        force: true
      when: stat_result.stat.exists

    - name: Delete old folders
      file:
        state: absent
        path: "{{ item }}"
      with_items:
        - "{{ noc_root }}"
        - /var/lib/noc/var/pkg
      when: noc_root not in host_mount_points

    - name: Handle if /opt/noc/ is mountpoint
      block:
        - name: Create temporary empty folder
          tempfile:
            state: directory
            suffix: tempansible
          register: tempfile_1
          delegate_to: "{{ inventory_hostname }}"

        - name: Empty noc_root directory
          synchronize:
            src: "{{ tempfile_1.path }}/"
            dest: "{{ item }}"
            delete: true
            recursive: true
            perms: true
            owner: true
          delegate_to: "{{ inventory_hostname }}"
          with_items:
            - /var/lib/noc/var/pkg
            - "{{ noc_root }}/"

        - name: Fix permissions on noc dir
          file:
            path: "{{ noc_root }}"
            owner: root
            group: root
            mode: '0755'

      when: noc_root in host_mount_points

    - name: Reinitialize git
      include_tasks: "git.yml"

    - name: Recreate noc dirs
      include_tasks: "dirs.yml"

    - name: Copy settings.yml back
      copy:
        src: /tmp/settings.yml
        dest: "{{ noc_root }}/etc/settings.yml"
        remote_src: true
      when: stat_result.stat.exists

  when:
    - noc_python_existing_family_version is defined
    - "{{ noc_python_existing_family_version[:1] }} == '2'"

# When existing python is 3.* version
- block:
    - block:  # When Target version equals system
        - name: Remove old venv by dirty method
          file:
            state: absent
            path: "{{ item }}"
            with_items:
              - "{{ noc_root }}/bin"
              - "{{ noc_root }}/include"
              - "{{ noc_root }}/lib"
              - "{{ noc_root }}/lib64"
              - "{{ noc_root }}/pyvenv.cfg"
          when:
            - noc_python_existing_family_version is defined
            - noc_python_existing_family_version != system_python3_version.stdout

        - name: Decide to use system's Python3 of "{{ noc_py3_ver }}" version
          set_fact:
            noc_init_python_path: "/usr/bin/python{{ noc_py3_ver }}"

      when:
        - system_python3_version is defined
        - system_python3_version == noc_py3_ver

    - block:  # When Target version not equals system
        - name: Remove old venv by dirty method
          file:
            state: absent
            path: "{{ item }}"
            with_items:
              - "{{ noc_root }}/bin"
              - "{{ noc_root }}/include"
              - "{{ noc_root }}/lib"
              - "{{ noc_root }}/lib64"
              - "{{ noc_root }}/pyvenv.cfg"
          when:
            - noc_python_existing_version is defined
            - noc_python_existing_version != noc_py_rel

        - name: Bring Python of {{ noc_py3_ver }} version when system's python differs
          include_tasks: "bring_python.yml"

      when:
        - system_python3_version is defined
        - system_python3_version != noc_py3_ver

  when:
    - noc_python_existing_family_version is defined
    - "{{ noc_python_existing_family_version[:1] }} == '3'"

- block:  # When no python at all

    - name: Bring Python of {{ noc_py3_ver }} version when no python
      include_tasks: "bring_python.yml"

  when:
    - not noc_bin_python_path.stat.exists

- name: Initialize virtualenv3
  pip:
    chdir: "{{ noc_root }}"
    name: "pip"
    virtualenv: "{{ noc_root }}"
    virtualenv_command: "{{ noc_init_python_path }} -m venv"
    state: "latest"
  environment:
    https_proxy: "{{ http_proxy }}"
    http_proxy: "{{ http_proxy }}"
    LC_ALL: C

- name: Install wheel
  pip:
    name: wheel
    chdir: "{{ noc_root }}"
    virtualenv: "{{ noc_root }}"
    state: present
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tags:
    - requirements

- name: Upgrade setuptools
  pip:
    name: setuptools
    chdir: "{{ noc_root }}"
    virtualenv: "{{ noc_root }}"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tags:
    - requirements

- name: Relink site-packages
  command: "{{ noc_root }}/scripts/deploy/link-site-packages"
  args:
    chdir: "{{ noc_root }}"
  register: s
  changed_when: "'CHANGED' in s.stdout"

- name: Combine service list for requirements install
  set_fact:
    node_noc_components: "{{ lookup('template', './templates/requirements.list.j2') }}"
  tags:
    - requirements

- name: Generate package list for install
  command: "./scripts/build/get-noc-requirements.py {{ node_noc_components | replace('\r\n', ' ') }}"
  args:
    chdir: "{{ noc_root }}"
  register: noc_pip_packages
  tags:
    - requirements

- name: Install ALL necessary python packages
  pip:
    chdir: "{{ noc_root }}"
    name: "{{ noc_pip_packages.stdout.split('\n') }}"
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
    PATH: "{{ ansible_env.PATH }}:/usr/pgsql-{{ postgres_version }}/bin/"
    CFLAGS: "{{ pip_cflags | default('') }}"
    LDFLAGS: "{{ pip_ldflags | default('') }}"
  tags:
    - requirements

- name: Ensure that noc.pth is absent
  file:
    path: "{{ noc_root }}/lib/python{{ noc_py3_ver }}/site-packages/noc.pth"
    state: absent
