---
- name: gather py3 facts
  vars:
    ansible_python_interpreter: /usr/bin/python3
  setup:
    gather_subset:
      - 'min'

- name: Check if we have python in NOC/bin/ folder
  stat:
    path: "{{ noc_root }}/bin/python"
  register: noc_bin_python_path

- name: Check noc Python version
  shell: "{{ noc_root|quote }}/bin/python -V | cut -d' ' -f 2"
  register: noc_python_existing_version
  when:
    - noc_bin_python_path.stat.exists

- name: Strip existing noc python version
  set_fact:
    noc_python_existing_family_version: "{{ noc_python_existing_version.stdout.split('.')[:2] | join('.') }}"
  when:
    - noc_python_existing_version is defined and noc_python_existing_version and noc_bin_python_path.stat.exists

- name: Check if we have system Python of {{ noc_py3_ver }} version
  register: system_python3_path
  stat:
    path: "/usr/bin/python{{ noc_py3_ver }}"

- name: Check system Python version
  shell: /usr/bin/python{{ noc_py3_ver|quote }} -V | cut -d' ' -f 2
  register: system_python3_version
  when: system_python3_path.stat.exists

- name: Strip existing noc python version
  set_fact:
    system_python3_existing_family_version: "{{ system_python3_version.stdout.split('.')[:2] | join('.') }}"
  when:
    - system_python3_version is defined and system_python3_path.stat.exists

# If there is a system python with needed family (3.X)
- name: We'll try to use system's python
  set_fact:
    noc_init_python_path: system_python3_path
  when:
    - system_python3_version.stdout is defined
    - system_python3_existing_family_version is defined
    - system_python3_existing_family_version == noc_py3_ver

# In all other cases we bring our own python
- name: We'll try to use own python
  set_fact:
    noc_init_python_path: "/opt/python{{ noc_py3_ver }}/bin/python"
  when:
    - noc_init_python_path is not defined


# Archive whole directory with old python2.* version and then delete folder's content
- block:

    - name:
      include_tasks: "clean_dir.yml"

    - name: Bring Python of {{ noc_py3_ver }} version when system's python differs
      include_tasks: "bring_python.yml"

    - name: Set py_install marker 1
      set_fact:
        is_python_installed: "True"

  when:
    - noc_python_existing_family_version is defined
    - noc_python_existing_family_version[:1] == '2'

# When existing python is 3.* version
- block:

    - block:  # When target version equals system
        - name: Recreate noc dirs
          include_tasks: "clean_dir.yml"
          when:
            - noc_python_existing_family_version is defined
            - noc_python_existing_family_version != system_python3_version.stdout

        - name: Set py_install marker 2
          set_fact:
            is_python_installed: "True"

      when:
        - system_python3_existing_family_version is defined
        - system_python3_existing_family_version == noc_py3_ver

    - block:  # When Target version not equals system and installed python not equals needed
        - name: Recreate noc dirs
          include_tasks: "clean_dir.yml"
          when:
            - noc_python_existing_version is defined
            - noc_python_existing_version != py_rel_name

        - name: Bring Python of {{ noc_py3_ver }} version when system's python differs
          include_tasks: "bring_python.yml"

        - name: Set py_install marker 3
          set_fact:
            is_python_installed: "True"

      when:
        - system_python3_existing_family_version is defined
        - system_python3_existing_family_version != noc_py3_ver

  when:
    - noc_python_existing_family_version is defined
    - noc_python_existing_family_version[:1] == '3'


# Install python in all other cases
- block:

    - name: Bring Python of {{ noc_py3_ver }} version when no good python on node
      include_tasks: "bring_python.yml"

    - name: Set install marker 4
      set_fact:
        is_python_installed: "True"

  when:
    - noc_python_existing_family_version is not defined
    - is_python_installed is not defined

- name: Initialize virtualenv3
  pip:
    chdir: "{{ noc_root }}"
    name: "pip"
    virtualenv: "{{ noc_root }}"
    virtualenv_command: "{{ noc_init_python_path }} -m venv"
    state: "latest"
  environment:
    https_proxy: "{{ http_proxy }}"
    http_proxy: "{{ http_proxy }}"
    LC_ALL: C

- name: Install wheel
  pip:
    name: wheel
    chdir: "{{ noc_root }}"
    virtualenv: "{{ noc_root }}"
    state: present
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tags:
    - requirements

- name: Upgrade setuptools
  pip:
    name: setuptools
    chdir: "{{ noc_root }}"
    virtualenv: "{{ noc_root }}"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tags:
    - requirements

- name: Relink site-packages
  command: "{{ noc_root }}/scripts/deploy/link-site-packages"
  args:
    chdir: "{{ noc_root }}"
  register: s
  changed_when: "'CHANGED' in s.stdout"

- name: Combine service list for requirements install
  set_fact:
    node_noc_components: "{{ lookup('template', './templates/requirements.list.j2') }}"
  tags:
    - requirements

- name: Generate package list for install
  command: "./scripts/build/get-noc-requirements.py {{ node_noc_components | replace('\r\n', ' ') }}"
  args:
    chdir: "{{ noc_root }}"
  register: noc_pip_packages
  tags:
    - requirements

- name: Install ALL necessary python packages
  pip:
    chdir: "{{ noc_root }}"
    name: "{{ noc_pip_packages.stdout.split('\n') }}"
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
    PATH: "{{ ansible_env.PATH }}:/usr/pgsql-{{ postgres_version }}/bin/"
    CFLAGS: "{{ pip_cflags | default('') }}"
    LDFLAGS: "{{ pip_ldflags | default('') }}"
  tags:
    - requirements

- name: Ensure that noc.pth is absent
  file:
    path: "{{ noc_root }}/lib/python{{ noc_py3_ver }}/site-packages/noc.pth"
    state: absent
